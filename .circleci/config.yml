defaults: &defaults
  working_directory: ~/app
  docker:
    - image: circleci/node:10.15.3-browsers

deploy_container_config: &deploy_container_config
  docker:
    - image: ${CP_TOOLS_IMAGE}
      environment:
        GITHUB_TEAM_NAME_SLUG: whereabouts-api

install_aws_cli: &install_aws_cli
  run:
    name: Set up aws
    command: |
      sudo apt-get --assume-yes install python3-pip
      sudo pip3 install awscli
      $(aws ecr get-login --region eu-west-2 --no-include-email)

version: 2
jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/openjdk:11-jdk-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: ./gradlew build
      - run:
          name: Record the Application Version
          command: |
            jar xvf build/libs/whereabouts-api-*.jar BOOT-INF/classes/META-INF/build-info.properties
            APP_VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
            rm BOOT-INF/classes/META-INF/build-info.properties

            # make up a good version name
            TAG=${APP_VERSION}.${CIRCLE_BRANCH}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              TAG=${APP_VERSION}
            fi
            echo $TAG > ./app_version.txt

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle
            - app_version.txt

  build_docker:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            APP_VERSION=$(cat ./app_version.txt)
            docker build --rm=false . \
               --tag "mojdigitalstudio/whereabouts-api:$APP_VERSION" \
               --label "maintainer=jamie.draper@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              # publish to docker hub as the tag
             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
             docker tag mojdigitalstudio/whereabouts-api:$APP_VERSION mojdigitalstudio/whereabouts-api:latest
             docker push mojdigitalstudio/whereabouts-api:$APP_VERSION
             docker push mojdigitalstudio/whereabouts-api:latest
            fi

  copy_image_to_ecr:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker
      - *install_aws_cli
      - run:
          name: publish image to ecs
          command: |
            APP_VERSION=$(cat ./app_version.txt)
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker pull mojdigitalstudio/whereabouts-api:$APP_VERSION

            docker tag mojdigitalstudio/whereabouts-api:$APP_VERSION "${ECR_IMAGE_URI}:${APP_VERSION}"
            docker tag "${ECR_IMAGE_URI}:${APP_VERSION}" "${ECR_IMAGE_URI}:latest"
            login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
            ${login}
            docker push "${ECR_IMAGE_URI}:${APP_VERSION}"
            docker push "${ECR_IMAGE_URI}:latest"

  deploy_dev:
    <<: *deploy_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/app
      - run:
          name: Kubectl deployment dev setup
          command: |
            $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            setup-kube-auth
            kubectl config use-context dev
      - deploy:
          name: Deploy to Dev
          command: |
            APP_VERSION=$(egrep buildNumber ~/mojdigitalstudio/sentence-planning/build-info.json  | awk -F"\"" '{print $4}')
            #AWS_ACCESS_KEY_ID=${SM_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${SM_AWS_SECRET_ACCESS_KEY} aws secretsmanager --region ${AWS_DEFAULT_REGION} get-secret-value --secret-id sentence-planning-development | jq -r .SecretString | \
            helm upgrade whereabouts-api helm_deploy/whereabouts-api/. \
              --install --wait \
              --tiller-namespace=${KUBE_ENV_DEV_NAMESPACE} \
              --namespace=${KUBE_ENV_DEV_NAMESPACE} \
              #--values - \
              --values ./helm_deploy/values-dev.yaml \
              --set image.repository="${ECR_IMAGE_URI}" \
              --set image.tag="${APP_VERSION}"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          requires:
            - build
          filters:
            branches:
              only: master
      - copy_image_to_ecr:
          requires:
            - build_docker
      - deploy_dev:
          requires:
            - copy_image_to_ecs

